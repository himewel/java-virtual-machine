// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2018 03:29:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Main_vlg_sample_tst(
	clk_externo,
	rst_externo,
	sampler_tx
);
input  clk_externo;
input  rst_externo;
output sampler_tx;

reg sample;
time current_time;
always @(clk_externo or rst_externo)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Main_vlg_check_tst (
	a,
	b,
	data_out,
	igual,
	jump_out,
	maior,
	menor,
	out_addr,
	pc_counter,
	stack_in,
	stack_out,
	ula_out,
	sampler_rx
);
input [7:0] a;
input [7:0] b;
input [7:0] data_out;
input  igual;
input  jump_out;
input  maior;
input  menor;
input [7:0] out_addr;
input [7:0] pc_counter;
input [7:0] stack_in;
input [7:0] stack_out;
input [7:0] ula_out;
input sampler_rx;

reg [7:0] a_expected;
reg [7:0] b_expected;
reg [7:0] data_out_expected;
reg  igual_expected;
reg  jump_out_expected;
reg  maior_expected;
reg  menor_expected;
reg [7:0] out_addr_expected;
reg [7:0] pc_counter_expected;
reg [7:0] stack_in_expected;
reg [7:0] stack_out_expected;
reg [7:0] ula_out_expected;

reg [7:0] a_prev;
reg [7:0] b_prev;
reg [7:0] data_out_prev;
reg  igual_prev;
reg  jump_out_prev;
reg  maior_prev;
reg  menor_prev;
reg [7:0] out_addr_prev;
reg [7:0] pc_counter_prev;
reg [7:0] stack_in_prev;
reg [7:0] stack_out_prev;
reg [7:0] ula_out_prev;

reg [7:0] a_expected_prev;
reg [7:0] b_expected_prev;
reg [7:0] data_out_expected_prev;
reg  igual_expected_prev;
reg  jump_out_expected_prev;
reg  maior_expected_prev;
reg  menor_expected_prev;
reg [7:0] out_addr_expected_prev;
reg [7:0] pc_counter_expected_prev;
reg [7:0] stack_in_expected_prev;
reg [7:0] stack_out_expected_prev;
reg [7:0] ula_out_expected_prev;

reg [7:0] last_a_exp;
reg [7:0] last_b_exp;
reg [7:0] last_data_out_exp;
reg  last_igual_exp;
reg  last_jump_out_exp;
reg  last_maior_exp;
reg  last_menor_exp;
reg [7:0] last_out_addr_exp;
reg [7:0] last_pc_counter_exp;
reg [7:0] last_stack_in_exp;
reg [7:0] last_stack_out_exp;
reg [7:0] last_ula_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	data_out_prev = data_out;
	igual_prev = igual;
	jump_out_prev = jump_out;
	maior_prev = maior;
	menor_prev = menor;
	out_addr_prev = out_addr;
	pc_counter_prev = pc_counter;
	stack_in_prev = stack_in;
	stack_out_prev = stack_out;
	ula_out_prev = ula_out;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	data_out_expected_prev = data_out_expected;
	igual_expected_prev = igual_expected;
	jump_out_expected_prev = jump_out_expected;
	maior_expected_prev = maior_expected;
	menor_expected_prev = menor_expected;
	out_addr_expected_prev = out_addr_expected;
	pc_counter_expected_prev = pc_counter_expected;
	stack_in_expected_prev = stack_in_expected;
	stack_out_expected_prev = stack_out_expected;
	ula_out_expected_prev = ula_out_expected;
end


// expected pc_counter[ 7 ]
initial
begin
	pc_counter_expected[7] = 1'bX;
end 
// expected pc_counter[ 6 ]
initial
begin
	pc_counter_expected[6] = 1'bX;
end 
// expected pc_counter[ 5 ]
initial
begin
	pc_counter_expected[5] = 1'bX;
end 
// expected pc_counter[ 4 ]
initial
begin
	pc_counter_expected[4] = 1'bX;
end 
// expected pc_counter[ 3 ]
initial
begin
	pc_counter_expected[3] = 1'bX;
end 
// expected pc_counter[ 2 ]
initial
begin
	pc_counter_expected[2] = 1'bX;
end 
// expected pc_counter[ 1 ]
initial
begin
	pc_counter_expected[1] = 1'bX;
end 
// expected pc_counter[ 0 ]
initial
begin
	pc_counter_expected[0] = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// expected stack_in[ 7 ]
initial
begin
	stack_in_expected[7] = 1'bX;
end 
// expected stack_in[ 6 ]
initial
begin
	stack_in_expected[6] = 1'bX;
end 
// expected stack_in[ 5 ]
initial
begin
	stack_in_expected[5] = 1'bX;
end 
// expected stack_in[ 4 ]
initial
begin
	stack_in_expected[4] = 1'bX;
end 
// expected stack_in[ 3 ]
initial
begin
	stack_in_expected[3] = 1'bX;
end 
// expected stack_in[ 2 ]
initial
begin
	stack_in_expected[2] = 1'bX;
end 
// expected stack_in[ 1 ]
initial
begin
	stack_in_expected[1] = 1'bX;
end 
// expected stack_in[ 0 ]
initial
begin
	stack_in_expected[0] = 1'bX;
end 
// expected stack_out[ 7 ]
initial
begin
	stack_out_expected[7] = 1'bX;
end 
// expected stack_out[ 6 ]
initial
begin
	stack_out_expected[6] = 1'bX;
end 
// expected stack_out[ 5 ]
initial
begin
	stack_out_expected[5] = 1'bX;
end 
// expected stack_out[ 4 ]
initial
begin
	stack_out_expected[4] = 1'bX;
end 
// expected stack_out[ 3 ]
initial
begin
	stack_out_expected[3] = 1'bX;
end 
// expected stack_out[ 2 ]
initial
begin
	stack_out_expected[2] = 1'bX;
end 
// expected stack_out[ 1 ]
initial
begin
	stack_out_expected[1] = 1'bX;
end 
// expected stack_out[ 0 ]
initial
begin
	stack_out_expected[0] = 1'bX;
end 
// expected ula_out[ 7 ]
initial
begin
	ula_out_expected[7] = 1'bX;
end 
// expected ula_out[ 6 ]
initial
begin
	ula_out_expected[6] = 1'bX;
end 
// expected ula_out[ 5 ]
initial
begin
	ula_out_expected[5] = 1'bX;
end 
// expected ula_out[ 4 ]
initial
begin
	ula_out_expected[4] = 1'bX;
end 
// expected ula_out[ 3 ]
initial
begin
	ula_out_expected[3] = 1'bX;
end 
// expected ula_out[ 2 ]
initial
begin
	ula_out_expected[2] = 1'bX;
end 
// expected ula_out[ 1 ]
initial
begin
	ula_out_expected[1] = 1'bX;
end 
// expected ula_out[ 0 ]
initial
begin
	ula_out_expected[0] = 1'bX;
end 
// expected a[ 7 ]
initial
begin
	a_expected[7] = 1'bX;
end 
// expected a[ 6 ]
initial
begin
	a_expected[6] = 1'bX;
end 
// expected a[ 5 ]
initial
begin
	a_expected[5] = 1'bX;
end 
// expected a[ 4 ]
initial
begin
	a_expected[4] = 1'bX;
end 
// expected a[ 3 ]
initial
begin
	a_expected[3] = 1'bX;
end 
// expected a[ 2 ]
initial
begin
	a_expected[2] = 1'bX;
end 
// expected a[ 1 ]
initial
begin
	a_expected[1] = 1'bX;
end 
// expected a[ 0 ]
initial
begin
	a_expected[0] = 1'bX;
end 
// expected b[ 7 ]
initial
begin
	b_expected[7] = 1'bX;
end 
// expected b[ 6 ]
initial
begin
	b_expected[6] = 1'bX;
end 
// expected b[ 5 ]
initial
begin
	b_expected[5] = 1'bX;
end 
// expected b[ 4 ]
initial
begin
	b_expected[4] = 1'bX;
end 
// expected b[ 3 ]
initial
begin
	b_expected[3] = 1'bX;
end 
// expected b[ 2 ]
initial
begin
	b_expected[2] = 1'bX;
end 
// expected b[ 1 ]
initial
begin
	b_expected[1] = 1'bX;
end 
// expected b[ 0 ]
initial
begin
	b_expected[0] = 1'bX;
end 

// expected igual
initial
begin
	igual_expected = 1'bX;
end 

// expected maior
initial
begin
	maior_expected = 1'bX;
end 

// expected menor
initial
begin
	menor_expected = 1'bX;
end 
// expected out_addr[ 7 ]
initial
begin
	out_addr_expected[7] = 1'bX;
end 
// expected out_addr[ 6 ]
initial
begin
	out_addr_expected[6] = 1'bX;
end 
// expected out_addr[ 5 ]
initial
begin
	out_addr_expected[5] = 1'bX;
end 
// expected out_addr[ 4 ]
initial
begin
	out_addr_expected[4] = 1'bX;
end 
// expected out_addr[ 3 ]
initial
begin
	out_addr_expected[3] = 1'bX;
end 
// expected out_addr[ 2 ]
initial
begin
	out_addr_expected[2] = 1'bX;
end 
// expected out_addr[ 1 ]
initial
begin
	out_addr_expected[1] = 1'bX;
end 
// expected out_addr[ 0 ]
initial
begin
	out_addr_expected[0] = 1'bX;
end 

// expected jump_out
initial
begin
	jump_out_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or data_out_expected or data_out or igual_expected or igual or jump_out_expected or jump_out or maior_expected or maior or menor_expected or menor or out_addr_expected or out_addr or pc_counter_expected or pc_counter or stack_in_expected or stack_in or stack_out_expected or stack_out or ula_out_expected or ula_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected data_out = %b | expected igual = %b | expected jump_out = %b | expected maior = %b | expected menor = %b | expected out_addr = %b | expected pc_counter = %b | expected stack_in = %b | expected stack_out = %b | expected ula_out = %b | ",a_expected_prev,b_expected_prev,data_out_expected_prev,igual_expected_prev,jump_out_expected_prev,maior_expected_prev,menor_expected_prev,out_addr_expected_prev,pc_counter_expected_prev,stack_in_expected_prev,stack_out_expected_prev,ula_out_expected_prev);
	$display("| real a = %b | real b = %b | real data_out = %b | real igual = %b | real jump_out = %b | real maior = %b | real menor = %b | real out_addr = %b | real pc_counter = %b | real stack_in = %b | real stack_out = %b | real ula_out = %b | ",a_prev,b_prev,data_out_prev,igual_prev,jump_out_prev,maior_prev,menor_prev,out_addr_prev,pc_counter_prev,stack_in_prev,stack_out_prev,ula_out_prev);
`endif
	if (
		( a_expected_prev[0] !== 1'bx ) && ( a_prev[0] !== a_expected_prev[0] )
		&& ((a_expected_prev[0] !== last_a_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[0] = a_expected_prev[0];
	end
	if (
		( a_expected_prev[1] !== 1'bx ) && ( a_prev[1] !== a_expected_prev[1] )
		&& ((a_expected_prev[1] !== last_a_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[1] = a_expected_prev[1];
	end
	if (
		( a_expected_prev[2] !== 1'bx ) && ( a_prev[2] !== a_expected_prev[2] )
		&& ((a_expected_prev[2] !== last_a_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[2] = a_expected_prev[2];
	end
	if (
		( a_expected_prev[3] !== 1'bx ) && ( a_prev[3] !== a_expected_prev[3] )
		&& ((a_expected_prev[3] !== last_a_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[3] = a_expected_prev[3];
	end
	if (
		( a_expected_prev[4] !== 1'bx ) && ( a_prev[4] !== a_expected_prev[4] )
		&& ((a_expected_prev[4] !== last_a_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[4] = a_expected_prev[4];
	end
	if (
		( a_expected_prev[5] !== 1'bx ) && ( a_prev[5] !== a_expected_prev[5] )
		&& ((a_expected_prev[5] !== last_a_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[5] = a_expected_prev[5];
	end
	if (
		( a_expected_prev[6] !== 1'bx ) && ( a_prev[6] !== a_expected_prev[6] )
		&& ((a_expected_prev[6] !== last_a_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[6] = a_expected_prev[6];
	end
	if (
		( a_expected_prev[7] !== 1'bx ) && ( a_prev[7] !== a_expected_prev[7] )
		&& ((a_expected_prev[7] !== last_a_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[7] = a_expected_prev[7];
	end
	if (
		( b_expected_prev[0] !== 1'bx ) && ( b_prev[0] !== b_expected_prev[0] )
		&& ((b_expected_prev[0] !== last_b_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[0] = b_expected_prev[0];
	end
	if (
		( b_expected_prev[1] !== 1'bx ) && ( b_prev[1] !== b_expected_prev[1] )
		&& ((b_expected_prev[1] !== last_b_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[1] = b_expected_prev[1];
	end
	if (
		( b_expected_prev[2] !== 1'bx ) && ( b_prev[2] !== b_expected_prev[2] )
		&& ((b_expected_prev[2] !== last_b_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[2] = b_expected_prev[2];
	end
	if (
		( b_expected_prev[3] !== 1'bx ) && ( b_prev[3] !== b_expected_prev[3] )
		&& ((b_expected_prev[3] !== last_b_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[3] = b_expected_prev[3];
	end
	if (
		( b_expected_prev[4] !== 1'bx ) && ( b_prev[4] !== b_expected_prev[4] )
		&& ((b_expected_prev[4] !== last_b_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[4] = b_expected_prev[4];
	end
	if (
		( b_expected_prev[5] !== 1'bx ) && ( b_prev[5] !== b_expected_prev[5] )
		&& ((b_expected_prev[5] !== last_b_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[5] = b_expected_prev[5];
	end
	if (
		( b_expected_prev[6] !== 1'bx ) && ( b_prev[6] !== b_expected_prev[6] )
		&& ((b_expected_prev[6] !== last_b_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[6] = b_expected_prev[6];
	end
	if (
		( b_expected_prev[7] !== 1'bx ) && ( b_prev[7] !== b_expected_prev[7] )
		&& ((b_expected_prev[7] !== last_b_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[7] = b_expected_prev[7];
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( igual_expected_prev !== 1'bx ) && ( igual_prev !== igual_expected_prev )
		&& ((igual_expected_prev !== last_igual_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port igual :: @time = %t",  $realtime);
		$display ("     Expected value = %b", igual_expected_prev);
		$display ("     Real value = %b", igual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_igual_exp = igual_expected_prev;
	end
	if (
		( jump_out_expected_prev !== 1'bx ) && ( jump_out_prev !== jump_out_expected_prev )
		&& ((jump_out_expected_prev !== last_jump_out_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_out_expected_prev);
		$display ("     Real value = %b", jump_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_out_exp = jump_out_expected_prev;
	end
	if (
		( maior_expected_prev !== 1'bx ) && ( maior_prev !== maior_expected_prev )
		&& ((maior_expected_prev !== last_maior_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port maior :: @time = %t",  $realtime);
		$display ("     Expected value = %b", maior_expected_prev);
		$display ("     Real value = %b", maior_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_maior_exp = maior_expected_prev;
	end
	if (
		( menor_expected_prev !== 1'bx ) && ( menor_prev !== menor_expected_prev )
		&& ((menor_expected_prev !== last_menor_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port menor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", menor_expected_prev);
		$display ("     Real value = %b", menor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_menor_exp = menor_expected_prev;
	end
	if (
		( out_addr_expected_prev[0] !== 1'bx ) && ( out_addr_prev[0] !== out_addr_expected_prev[0] )
		&& ((out_addr_expected_prev[0] !== last_out_addr_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_addr_expected_prev);
		$display ("     Real value = %b", out_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_addr_exp[0] = out_addr_expected_prev[0];
	end
	if (
		( out_addr_expected_prev[1] !== 1'bx ) && ( out_addr_prev[1] !== out_addr_expected_prev[1] )
		&& ((out_addr_expected_prev[1] !== last_out_addr_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_addr_expected_prev);
		$display ("     Real value = %b", out_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_addr_exp[1] = out_addr_expected_prev[1];
	end
	if (
		( out_addr_expected_prev[2] !== 1'bx ) && ( out_addr_prev[2] !== out_addr_expected_prev[2] )
		&& ((out_addr_expected_prev[2] !== last_out_addr_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_addr_expected_prev);
		$display ("     Real value = %b", out_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_addr_exp[2] = out_addr_expected_prev[2];
	end
	if (
		( out_addr_expected_prev[3] !== 1'bx ) && ( out_addr_prev[3] !== out_addr_expected_prev[3] )
		&& ((out_addr_expected_prev[3] !== last_out_addr_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_addr_expected_prev);
		$display ("     Real value = %b", out_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_addr_exp[3] = out_addr_expected_prev[3];
	end
	if (
		( out_addr_expected_prev[4] !== 1'bx ) && ( out_addr_prev[4] !== out_addr_expected_prev[4] )
		&& ((out_addr_expected_prev[4] !== last_out_addr_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_addr_expected_prev);
		$display ("     Real value = %b", out_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_addr_exp[4] = out_addr_expected_prev[4];
	end
	if (
		( out_addr_expected_prev[5] !== 1'bx ) && ( out_addr_prev[5] !== out_addr_expected_prev[5] )
		&& ((out_addr_expected_prev[5] !== last_out_addr_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_addr_expected_prev);
		$display ("     Real value = %b", out_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_addr_exp[5] = out_addr_expected_prev[5];
	end
	if (
		( out_addr_expected_prev[6] !== 1'bx ) && ( out_addr_prev[6] !== out_addr_expected_prev[6] )
		&& ((out_addr_expected_prev[6] !== last_out_addr_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_addr_expected_prev);
		$display ("     Real value = %b", out_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_addr_exp[6] = out_addr_expected_prev[6];
	end
	if (
		( out_addr_expected_prev[7] !== 1'bx ) && ( out_addr_prev[7] !== out_addr_expected_prev[7] )
		&& ((out_addr_expected_prev[7] !== last_out_addr_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_addr_expected_prev);
		$display ("     Real value = %b", out_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_addr_exp[7] = out_addr_expected_prev[7];
	end
	if (
		( pc_counter_expected_prev[0] !== 1'bx ) && ( pc_counter_prev[0] !== pc_counter_expected_prev[0] )
		&& ((pc_counter_expected_prev[0] !== last_pc_counter_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_counter_expected_prev);
		$display ("     Real value = %b", pc_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_counter_exp[0] = pc_counter_expected_prev[0];
	end
	if (
		( pc_counter_expected_prev[1] !== 1'bx ) && ( pc_counter_prev[1] !== pc_counter_expected_prev[1] )
		&& ((pc_counter_expected_prev[1] !== last_pc_counter_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_counter_expected_prev);
		$display ("     Real value = %b", pc_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_counter_exp[1] = pc_counter_expected_prev[1];
	end
	if (
		( pc_counter_expected_prev[2] !== 1'bx ) && ( pc_counter_prev[2] !== pc_counter_expected_prev[2] )
		&& ((pc_counter_expected_prev[2] !== last_pc_counter_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_counter_expected_prev);
		$display ("     Real value = %b", pc_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_counter_exp[2] = pc_counter_expected_prev[2];
	end
	if (
		( pc_counter_expected_prev[3] !== 1'bx ) && ( pc_counter_prev[3] !== pc_counter_expected_prev[3] )
		&& ((pc_counter_expected_prev[3] !== last_pc_counter_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_counter_expected_prev);
		$display ("     Real value = %b", pc_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_counter_exp[3] = pc_counter_expected_prev[3];
	end
	if (
		( pc_counter_expected_prev[4] !== 1'bx ) && ( pc_counter_prev[4] !== pc_counter_expected_prev[4] )
		&& ((pc_counter_expected_prev[4] !== last_pc_counter_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_counter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_counter_expected_prev);
		$display ("     Real value = %b", pc_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_counter_exp[4] = pc_counter_expected_prev[4];
	end
	if (
		( pc_counter_expected_prev[5] !== 1'bx ) && ( pc_counter_prev[5] !== pc_counter_expected_prev[5] )
		&& ((pc_counter_expected_prev[5] !== last_pc_counter_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_counter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_counter_expected_prev);
		$display ("     Real value = %b", pc_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_counter_exp[5] = pc_counter_expected_prev[5];
	end
	if (
		( pc_counter_expected_prev[6] !== 1'bx ) && ( pc_counter_prev[6] !== pc_counter_expected_prev[6] )
		&& ((pc_counter_expected_prev[6] !== last_pc_counter_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_counter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_counter_expected_prev);
		$display ("     Real value = %b", pc_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_counter_exp[6] = pc_counter_expected_prev[6];
	end
	if (
		( pc_counter_expected_prev[7] !== 1'bx ) && ( pc_counter_prev[7] !== pc_counter_expected_prev[7] )
		&& ((pc_counter_expected_prev[7] !== last_pc_counter_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_counter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_counter_expected_prev);
		$display ("     Real value = %b", pc_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_counter_exp[7] = pc_counter_expected_prev[7];
	end
	if (
		( stack_in_expected_prev[0] !== 1'bx ) && ( stack_in_prev[0] !== stack_in_expected_prev[0] )
		&& ((stack_in_expected_prev[0] !== last_stack_in_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_in[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_in_expected_prev);
		$display ("     Real value = %b", stack_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_in_exp[0] = stack_in_expected_prev[0];
	end
	if (
		( stack_in_expected_prev[1] !== 1'bx ) && ( stack_in_prev[1] !== stack_in_expected_prev[1] )
		&& ((stack_in_expected_prev[1] !== last_stack_in_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_in[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_in_expected_prev);
		$display ("     Real value = %b", stack_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_in_exp[1] = stack_in_expected_prev[1];
	end
	if (
		( stack_in_expected_prev[2] !== 1'bx ) && ( stack_in_prev[2] !== stack_in_expected_prev[2] )
		&& ((stack_in_expected_prev[2] !== last_stack_in_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_in[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_in_expected_prev);
		$display ("     Real value = %b", stack_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_in_exp[2] = stack_in_expected_prev[2];
	end
	if (
		( stack_in_expected_prev[3] !== 1'bx ) && ( stack_in_prev[3] !== stack_in_expected_prev[3] )
		&& ((stack_in_expected_prev[3] !== last_stack_in_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_in[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_in_expected_prev);
		$display ("     Real value = %b", stack_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_in_exp[3] = stack_in_expected_prev[3];
	end
	if (
		( stack_in_expected_prev[4] !== 1'bx ) && ( stack_in_prev[4] !== stack_in_expected_prev[4] )
		&& ((stack_in_expected_prev[4] !== last_stack_in_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_in[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_in_expected_prev);
		$display ("     Real value = %b", stack_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_in_exp[4] = stack_in_expected_prev[4];
	end
	if (
		( stack_in_expected_prev[5] !== 1'bx ) && ( stack_in_prev[5] !== stack_in_expected_prev[5] )
		&& ((stack_in_expected_prev[5] !== last_stack_in_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_in[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_in_expected_prev);
		$display ("     Real value = %b", stack_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_in_exp[5] = stack_in_expected_prev[5];
	end
	if (
		( stack_in_expected_prev[6] !== 1'bx ) && ( stack_in_prev[6] !== stack_in_expected_prev[6] )
		&& ((stack_in_expected_prev[6] !== last_stack_in_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_in[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_in_expected_prev);
		$display ("     Real value = %b", stack_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_in_exp[6] = stack_in_expected_prev[6];
	end
	if (
		( stack_in_expected_prev[7] !== 1'bx ) && ( stack_in_prev[7] !== stack_in_expected_prev[7] )
		&& ((stack_in_expected_prev[7] !== last_stack_in_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_in[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_in_expected_prev);
		$display ("     Real value = %b", stack_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_in_exp[7] = stack_in_expected_prev[7];
	end
	if (
		( stack_out_expected_prev[0] !== 1'bx ) && ( stack_out_prev[0] !== stack_out_expected_prev[0] )
		&& ((stack_out_expected_prev[0] !== last_stack_out_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_out_expected_prev);
		$display ("     Real value = %b", stack_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stack_out_exp[0] = stack_out_expected_prev[0];
	end
	if (
		( stack_out_expected_prev[1] !== 1'bx ) && ( stack_out_prev[1] !== stack_out_expected_prev[1] )
		&& ((stack_out_expected_prev[1] !== last_stack_out_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_out_expected_prev);
		$display ("     Real value = %b", stack_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stack_out_exp[1] = stack_out_expected_prev[1];
	end
	if (
		( stack_out_expected_prev[2] !== 1'bx ) && ( stack_out_prev[2] !== stack_out_expected_prev[2] )
		&& ((stack_out_expected_prev[2] !== last_stack_out_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_out_expected_prev);
		$display ("     Real value = %b", stack_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stack_out_exp[2] = stack_out_expected_prev[2];
	end
	if (
		( stack_out_expected_prev[3] !== 1'bx ) && ( stack_out_prev[3] !== stack_out_expected_prev[3] )
		&& ((stack_out_expected_prev[3] !== last_stack_out_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_out_expected_prev);
		$display ("     Real value = %b", stack_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stack_out_exp[3] = stack_out_expected_prev[3];
	end
	if (
		( stack_out_expected_prev[4] !== 1'bx ) && ( stack_out_prev[4] !== stack_out_expected_prev[4] )
		&& ((stack_out_expected_prev[4] !== last_stack_out_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_out_expected_prev);
		$display ("     Real value = %b", stack_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stack_out_exp[4] = stack_out_expected_prev[4];
	end
	if (
		( stack_out_expected_prev[5] !== 1'bx ) && ( stack_out_prev[5] !== stack_out_expected_prev[5] )
		&& ((stack_out_expected_prev[5] !== last_stack_out_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_out_expected_prev);
		$display ("     Real value = %b", stack_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stack_out_exp[5] = stack_out_expected_prev[5];
	end
	if (
		( stack_out_expected_prev[6] !== 1'bx ) && ( stack_out_prev[6] !== stack_out_expected_prev[6] )
		&& ((stack_out_expected_prev[6] !== last_stack_out_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_out_expected_prev);
		$display ("     Real value = %b", stack_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stack_out_exp[6] = stack_out_expected_prev[6];
	end
	if (
		( stack_out_expected_prev[7] !== 1'bx ) && ( stack_out_prev[7] !== stack_out_expected_prev[7] )
		&& ((stack_out_expected_prev[7] !== last_stack_out_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_out_expected_prev);
		$display ("     Real value = %b", stack_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_stack_out_exp[7] = stack_out_expected_prev[7];
	end
	if (
		( ula_out_expected_prev[0] !== 1'bx ) && ( ula_out_prev[0] !== ula_out_expected_prev[0] )
		&& ((ula_out_expected_prev[0] !== last_ula_out_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ula_out_exp[0] = ula_out_expected_prev[0];
	end
	if (
		( ula_out_expected_prev[1] !== 1'bx ) && ( ula_out_prev[1] !== ula_out_expected_prev[1] )
		&& ((ula_out_expected_prev[1] !== last_ula_out_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ula_out_exp[1] = ula_out_expected_prev[1];
	end
	if (
		( ula_out_expected_prev[2] !== 1'bx ) && ( ula_out_prev[2] !== ula_out_expected_prev[2] )
		&& ((ula_out_expected_prev[2] !== last_ula_out_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ula_out_exp[2] = ula_out_expected_prev[2];
	end
	if (
		( ula_out_expected_prev[3] !== 1'bx ) && ( ula_out_prev[3] !== ula_out_expected_prev[3] )
		&& ((ula_out_expected_prev[3] !== last_ula_out_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ula_out_exp[3] = ula_out_expected_prev[3];
	end
	if (
		( ula_out_expected_prev[4] !== 1'bx ) && ( ula_out_prev[4] !== ula_out_expected_prev[4] )
		&& ((ula_out_expected_prev[4] !== last_ula_out_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ula_out_exp[4] = ula_out_expected_prev[4];
	end
	if (
		( ula_out_expected_prev[5] !== 1'bx ) && ( ula_out_prev[5] !== ula_out_expected_prev[5] )
		&& ((ula_out_expected_prev[5] !== last_ula_out_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ula_out_exp[5] = ula_out_expected_prev[5];
	end
	if (
		( ula_out_expected_prev[6] !== 1'bx ) && ( ula_out_prev[6] !== ula_out_expected_prev[6] )
		&& ((ula_out_expected_prev[6] !== last_ula_out_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ula_out_exp[6] = ula_out_expected_prev[6];
	end
	if (
		( ula_out_expected_prev[7] !== 1'bx ) && ( ula_out_prev[7] !== ula_out_expected_prev[7] )
		&& ((ula_out_expected_prev[7] !== last_ula_out_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ula_out_exp[7] = ula_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_externo;
reg rst_externo;
// wires                                               
wire [7:0] a;
wire [7:0] b;
wire [7:0] data_out;
wire igual;
wire jump_out;
wire maior;
wire menor;
wire [7:0] out_addr;
wire [7:0] pc_counter;
wire [7:0] stack_in;
wire [7:0] stack_out;
wire [7:0] ula_out;

wire sampler;                             

// assign statements (if any)                          
Main i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.clk_externo(clk_externo),
	.data_out(data_out),
	.igual(igual),
	.jump_out(jump_out),
	.maior(maior),
	.menor(menor),
	.out_addr(out_addr),
	.pc_counter(pc_counter),
	.rst_externo(rst_externo),
	.stack_in(stack_in),
	.stack_out(stack_out),
	.ula_out(ula_out)
);

// clk_externo
always
begin
	clk_externo = 1'b0;
	clk_externo = #2500 1'b1;
	#2500;
end 

// rst_externo
initial
begin
	rst_externo = 1'b0;
end 

Main_vlg_sample_tst tb_sample (
	.clk_externo(clk_externo),
	.rst_externo(rst_externo),
	.sampler_tx(sampler)
);

Main_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.data_out(data_out),
	.igual(igual),
	.jump_out(jump_out),
	.maior(maior),
	.menor(menor),
	.out_addr(out_addr),
	.pc_counter(pc_counter),
	.stack_in(stack_in),
	.stack_out(stack_out),
	.ula_out(ula_out),
	.sampler_rx(sampler)
);
endmodule

